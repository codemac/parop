#!/bin/sh
# -*- scheme -*-
exec guile -e "main" -s "$0" "$@"
!#
;;;;
;;;;
;;; raw text/template can include ~(). Scheme/script can include #~. they
;;; should be able to nest. Next is to figure out how to wrap this all
;;; up in sxml.
;;;
;; ok, so there is ~(), which we can do inline anywhere, and then
;; replace with
(use-modules (system vm trace)
	     (ice-9 format)
	     (ice-9 getopt-long)
	     (ice-9 q)
	     (srfi srfi-1)
	     (srfi srfi-2)
	     (srfi srfi-11)
	     (sxml simple)
	     (ice-9 pretty-print)
	     ((sxml xpath)
	      #:prefix sxpath:))

;;; our global context for each run. GSL has the following contexts:
;;;
;;;    The first predefined scope is called global and can be used to
;;;    hold global data. Its underlying data structure is a symbol
;;;    table; it may have attributes with any name and any type (scalar
;;;    or structured), but no children.
;;;
;;;    The second predefined scope is called gsl and holds GSL internal
;;;    data. NB. At the current moment there is a namespace clash
;;;    between the scope gsl and the instruction gsl. This can be
;;;    avoided by the use of square brackets [gsl] to reference the
;;;    scope. The problem will disappear when the gsl instruction is
;;;    deprecated.
;;;
;;;    The third predefined scope is called class and holds the classes
;;;    registered with GSL. These are typically: file, string, env,
;;;    conv, math, sock, thread, xml, time, regexp, proc and diag. They
;;;    should be documented below.
;;;
;;;    The fourth predefined scope is called root. It refers to an XML
;;;    item also called root, which is typically used as a parent for
;;;    all other XML structures.
;;;
;;;    The fifth and final predefined scope is the top-level XML item
;;;    from the XML source file, if one was specified.
;;;
;;; We do not need to replicate the "global" scope, as we have the
;;; global scheme environment. Similarly with the gsl scope, we just
;;; need to pick a namespace we stick with for users to trust. The
;;; third looks just like "libraries". Which we'll have to do, but
;;; once again, not a scope afaict.
;;;
;;; The thing I can't figure out what root is vs the fifth "file top
;;; level xml scope". Need some more time to figure that out.


(define *scope-q* '())

;; This is our "root" structure, that will contain all our xml related
;; data. Need to come up with a much sticter "data model" for how this
;; is layed out. my guess is that it will be *TOP* -> FILENAME/NAME??
;; -> top level elmnt
(define *xml-roots* '(*TOP*))

(define (symref->list s)
  (map string->symbol (string-split (symbol->string s) #\.)))

;; (define-syntax ref
;;   (syntax-rules ()
;;     ((_ ref)
;;      (let (())))))

(define* (read-ref r sym #:key (style 'none) (as "~a"))
  (define (xml-value s) (cadr s))
  (let ((res (xml-value (match-xml-attribute sym (xml-element-attributes r)))))
    (format #f as
	    ((case style
	       ((upcase) string-upcase)
	       ((downcase) string-downcase)
	       ((title) string-titlecase)
	       (else identity))
	     res))))

(define* (ref sym #:optional (case 'none))
  (let ((syms (symref->list sym)))
    (if (> (length syms) 1)
	((sxpath:sxpath (append *scope-q* (drop-right syms 1)))))))

(define (realpair? a)
  (and (pair? a) (pair? (cdr a))))

(define (clone ls)
  (cond
   ((null? ls)
    ls)
   ((list? ls)
    (cons (clone (car ls)) (clone (cdr ls))))
   ((realpair? ls)
    (cons (car ls) (clone (cdr ls))))
   (else
    ls)))

;;; What is "well defined" sxml?
;;;
;;; sxml 
(define (sxml-cond-fold ls syms proc)
  (cond
   ((null? ls) '())
   ((= 0 (length syms))
    (clone ls))
   ((and (list? ls)
	 (list? (car ls))
	 (eq? '@ (caar ls))
	 (not (eq? '@ (car syms))))
    (cons (car ls)
	  (sxml-cond-fold (cdr ls) syms proc)))
   ((and (list? ls)
	 (list? (car ls))
	 (eq? (caar ls) (car syms)))
    (if (= 1 (length syms))
	(map proc ls)
	(cons
	 (cons
	  (caar ls)
	  (sxml-cond-fold (cdar ls) (cdr syms) proc))
	 (sxml-cond-fold (cdr ls) syms proc))))
   (else
    (clone ls))))

(define (scope-find syms)
  "For each in SYM, push scope until we find what we're looking for,
or error that we didn't find what was specified."
  ((sxpath:sxpath (append *scope-q* syms)) *xml-roots*))

(define (xml-read f)
  (let* ((fp (open-file f "r"))
	 (res (xml->sxml fp #:trim-whitespace? #t)))
    (close-port fp)
    (if (= 2 (length res))
	(cadr res)
	res)))

(define (sxml-read f)
  "Read an SXML file into something for the xml roots list. At some
point we should support XML as well, though it won't work with our
reader hacks :("
  (let* ((fp (open-file f "r"))
	 (result '()))
    (set! result (let repl-loop ((expr (read fp)))
		   (if (not (eof-object? expr))
		       (cons expr (repl-loop (read fp)))
		       (begin
			 (close-port fp)
			 '()))))
    result))

(define (parop-add-file! root)
  (set! *xml-roots* (append! *xml-roots* root)))

(define (last-car l)
  (car (last-pair l)))

(define-syntax for-ref-set!
  (lambda (stx)
    (syntax-case stx ()
      ((_ nodes expr ...)
       (with-syntax
	   ((nodearg (datum->syntax stx (last-car (symref->list (syntax->datum #'nodes))))))
	 #'(begin
	     (set! *xml-roots*
	       (cons
		(car *xml-roots*)
		(sxml-cond-fold
		 (cdr *xml-roots*)
		 (symref->list (quote nodes))
		 (lambda (nodearg)
		   expr ...))))))))))


;; TODO: ok - much easier plan here is to ¡¡¡*rebuild*!!! things as we
;; process these entries. So given the arg we pass into each, we
;; return it upward to remake our sxml structure. hard part to figure
;; out is how to handle the multi-root issues.
(define-syntax for-ref
  (lambda (stx)
    (syntax-case stx ()
      ((_ nodes expr ...)
       (with-syntax
	   ((nodearg (datum->syntax stx (last-car (symref->list (syntax->datum #'nodes))))))
	 #'(sxml-cond-fold
	    (cdr *xml-roots*)
	    (symref->list (quote nodes))
	    (lambda (nodearg)
	      expr ...)))))))

(define (printable-to-chars p)
  (reverse
   (string->list
    (format #f "~a" p))))

(define (process-inner-raw-loop iport)
  (define rawresult '())
  (let loop ((cic (read-char iport)))
    (cond
     ((eof-object? cic)
      (error "Didn't find a concluding ~#, bug??"))
     ((eq? cic #\~)
      (cond
       ((eq? (peek-char iport) #\#)
	(begin
	  ;; advance 1 char to get rid of hash
	  (read-char iport)
	  (reverse-list->string rawresult)))
       ((eq? (peek-char iport) #\()
	(and-let* ((expr (read iport))
		   (outr (open-output-string))
		   (oldout (current-output-port))
		   ((set-current-output-port outr))
		   (output (primitive-eval expr))
		   ((set-current-output-port oldout)))
	  (set! rawresult (append (reverse (string->list (get-output-string outr))) rawresult)))
	(loop (read-char iport)))
       ((eq? (peek-char iport) #\~)
	(begin
	  (read-char iport)
	  (set! rawresult (cons cic rawresult))
	  (loop (read-char iport))))
       (else
	(error "Dangling tilde!"))))
     (else
      (begin
	(set! rawresult (cons cic rawresult))
	(loop (read-char iport)))))))

(define (process-inner-raw char iport)
  ;; first, read in first newline
  (cond
   ((eq? (peek-char iport) #\newline)
    (read-char iport)
    (process-inner-raw-loop iport))
   (else
    (error "Need newline after beginning #~!"))))

;; install the handler into the scheme reader
(read-hash-extend #\~ process-inner-raw)

(define (printable? s)
  (or (number? s)
      (string? s)
      (list?   s)
      (symbol? s)))

;; lifted from lips
(define (process-outer-raw iport oport)
  (define line-number 0)
  (define first-character #t)
  ;line-number -> for error reporting
  ;first-character -> are we processing the first character of the line?
  ;			If so and it is a macro that produces no printable output
  ;			and nothing else is on the line
  ;			we will remove the following newline
  ;we're going to loop over all the characters
  ;in the file looking for escapes
  ;cic -> current input character
  (let loop ((cic (read-char iport)))
      (cond 
	;if we find a tilda then check to see if the next character
	;is also a tilda. If it is, then we output a tilda and eat the
	;tilda from input.
	((eq? cic #\~)
		(if (eq? (peek-char iport) #\~)
		  (begin
		    (display "~" oport)
		    (read-char iport))
		  ;if the next character is not a tilda then read in a s-exp
			;evaluate and print output
			;if we're at the beginning of a line and the character
			;following the expression is a newline then, if the expression
			;doesn't evaluate to something printable, ignore the newline
		  (let* ((expr (read iport))
		        (output (primitive-eval expr))) 
		      (if (printable? output)
			(display output oport)
			(if (and first-character
			      (eq? (peek-char iport) #\newline))
			  (read-char iport))))))

	((eq? cic #\newline)					
		(display cic oport)
		(set! first-character #t)
		(set! line-number (1+ line-number)))

	((eof-object? cic))

	(else
	 	(if first-character 
		  (set! first-character #f))
	  	(display cic oport)))

      (if (not (eof-object? cic))
        (loop (read-char iport)))))

(define (xml-element-attributes s)
    (if (and (pair? s) (symbol? (car s)))
        (fold-right (lambda (a b)
                      (if (and (pair? a) (eq? '@ (car a)))
                          (if (null? b)
                              (filter (lambda (i) (not (and (pair? i) (eq? '@ (car i))))) (cdr a))
                              (fold-right (lambda (c d)
                                            (if (and (pair? c) (eq? '@ (car c)))
                                                d
                                                (cons c d)))
                                          b (cdr a)))
                          b))
                    '()
                    (cdr s))
        (error 'xml-element-attributes "expected an xml-element, given" s)))

(define (match-xml-attribute key l)
  (if (not (pair? l))
      #f
      (if (eq? (car (car l)) key)
	  (car l)
	  (match-xml-attribute key (cdr l)))))

(define (parop-find-script override)
  (if override
      override
      (if (= (length *xml-roots*) 2)
	  (cadr
	   (match-xml-attribute
	    'script
	    (xml-element-attributes (cadr *xml-roots*)))))))

(define (sxml-save! f)
  (let ((s (open-file f "w")))
    (pretty-print *xml-roots* s #:width 80)
    (close-port s)))

(define* (read-and-eval! #:optional (port (current-input-port)))
  (let repl-loop ((expr (read port)))
    (if (not (eof-object? expr))
	(let ((output (primitive-eval expr)))
	  ;; (if (printable? output)
	  ;;     (display output))
	  (repl-loop (read port))))))

(define *parop-option-spec*
  '((sdata   (single-char #\s) (value #t))
    (script  (single-char #\l) (value #t))
    (help    (single-char #\h) (value #f))
    (xdata   (single-char #\x)  (value #f))
    (version (single-char #\v) (value #f))))

(define (parop-opt sym)
  (option-ref *parop-options* sym #f))

(define *parop-options* (getopt-long (command-line) *parop-option-spec*))

(define (helpf)
  (display "\
parop [options] [-d|-s] <file> ...
  -h, --help               Print help message
  -l, --script FILE        Use FILE as script to run on data file
  -s, --scheme-data FILE   Use FILE as scheme data input file
  -x, --xml-data FILE      Use FILE as xml data input file
  -v, --version            Print version info
"))

(define (versionf)
  (display "parop version v0.0\n"))

;; we should define how we want to read. Either in SXML default
;; (i.e. template data), RAWTEXT default (template text), or in SCHEME
;; default (i.e. script).
;;
;; TODO: What is the difference between template data & template
;; rawtext? I think it's potentially that the scheme reader is not
;; like an XML reader. It doesn't just let raw text exist
;; e'erywhere.... shit my template language (empty text) doesn't
;; include sxml parsing! ass! (wait yes it does! ~( raw mode! ).).
(define (main args)
  (let* ((help    (parop-opt 'help))
	 (version (parop-opt 'version))
	 (xdata   (parop-opt 'xdata))
	 (script  (parop-opt 'script))
	 (sdata   (parop-opt 'sdata)))
    (cond
     (help (helpf) (exit 0))
     (version (versionf) (exit 0))
     (sdata
      (parop-add-file! (sxml-read sdata))
      (read-and-eval! (open-file (parop-find-script script) "r"))
      (exit 0))
     (xdata
      (parop-add-file! (sxml-read xdata))
      (read-and-eval! (open-file (parop-find-script script) "r"))
      (exit 0))
     (else
      (display "Not enough to do!") (newline)
      (helpf)
      (exit 1))))

  ;; template mode
;;  (process-outer-raw (current-input-port) (current-output-port))
  )
